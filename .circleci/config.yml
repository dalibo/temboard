version: 2.1

workflows:
  version: 2
  # In CircleCI, release pipeline is a subset of main pipeline. By default,
  # jobs as skipped on tags. Jobs enabled for tags constitute the release
  # pipeline.
  #
  # release job is skipped on branches.
  default:
    jobs:
    - static:
        name: stage0-static
        filters: &enable-for-tags
          tags:
            only: '/v.+/'
    - doc:
        name: stage0-doc
    - lint-python:
        name: stage0-lint-python
    - lint-js:
        name: stage0-lint-js
    - unit:
        name: stage0-unit-py<< matrix.pyversion >>
        matrix:
          parameters:
            pyversion: ["3.6"]
    - dist:
        name: stage0-dist
        requires: [stage0-static]
        filters:
          <<: *enable-for-tags
    - rpm:
        name: stage1-pkg-<< matrix.codename >>
        filters:
          <<: *enable-for-tags
        matrix:
          parameters:
            codename: [rockylinux9, rockylinux8, centos7]
        requires: [stage0-dist]
    - deb:
        name: stage1-pkg-<< matrix.codename >>
        filters:
          <<: *enable-for-tags
        matrix:
          parameters:
            codename: [bookworm, bullseye, buster, jammy]
        requires: [stage0-dist]
    - func: &func
        name: stage2-func-pg<< matrix.pgversion >>-<< matrix.dist >>
        requires:
        - stage0-unit-py3.6
        - stage1-pkg-<< matrix.dist >>
        matrix:
          parameters:
            dist: [rockylinux9]
            # Odd version of Postgres for RHEL
            pgversion: ["15"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [bookworm]
            # Even version of Postgres for Debian
            pgversion: ["16"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [rockylinux8]
            pgversion: ["13"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [bullseye]
            pgversion: ["14"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [centos7]
            pgversion: ["11", "9.6"]
    - func:
        <<: *func
        matrix:
          parameters:
            dist: [buster]
            pgversion: ["10"]
    - release:
        name: stage3-release
        # Send secrets to this jobs from temboard CircleCI context.
        context: temboard
        requires:
        - stage1-pkg-rockylinux9
        - stage1-pkg-rockylinux8
        - stage1-pkg-centos7
        - stage1-pkg-bookworm
        - stage1-pkg-bullseye
        - stage1-pkg-buster
        - stage1-pkg-jammy
        filters:
          <<: *enable-for-tags
          # Skip on branches!
          branches:
            ignore: '/.*/'
    - docker:
        name: stage3-docker
        context: temboard
        requires: [stage1-pkg-bullseye]
        filters:
          <<: *enable-for-tags


jobs:
  static:
    docker: [{image: node:16}]
    working_directory: &working_directory /workspace
    steps:
    - checkout
    - run:
        name: Install Browser packages
        command: |
          cd ui;
          npm install-clean
    - run:
        name: Build browser assets
        command: |
          make static
    - store_artifacts:
        path: /workspace/ui/temboardui/static/
    - persist_to_workspace:
        root: .
        paths: [ui/temboardui/static/]

  dist:
    docker: [{image: dalibo/buildpack-python:bullseye}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run:
        name: Build Agent & UI
        command: |
          make dist
    - store_artifacts:
        path: /workspace/agent/dist/
    - store_artifacts:
        path: /workspace/ui/dist/
    - persist_to_workspace:
        root: .
        paths:
        - agent/dist/*.tar.gz
        - agent/dist/*.whl
        - ui/dist/*.tar.gz
        - ui/dist/*.whl

  doc:
    docker: [{image: "python:3.7"}]
    working_directory: *working_directory
    steps:
    - checkout
    - run:
        name: Install mkdocs and extensions
        command: |
          pip install --upgrade --requirement docs/requirements.txt
    - run:
        name: Build documentation with mkdocs
        command: |
          mkdocs build --strict
    - run:
        name: Extract release notes
        command: |
          mkdir -p build
          make -s release-notes > build/RELEASE-NOTES.md
    - store_artifacts:
        path: build/RELEASE-NOTES.md
    - store_artifacts:
        path: README.html
        destination: build/README.html

  lint-python:
    docker: [image: python:3.9]
    working_directory: *working_directory
    steps:
      - checkout
      - &pip-cache-restore
        restore_cache:
          keys:
            - temboard-{{ .Branch }}
            - temboard-master
      - run:
          name: Setup python environment
          command: |
            pip install --upgrade --requirement dev/requirements.txt
      - run:
          name: Lint Agent
          command: |
            cd agent/
            flake8 temboardagent
            python setup.py --long-description | rst2html.py --verbose --halt=warning - >/dev/null
            check-manifest
      - run:
          name: Lint UI
          command: |
            set -x
            # See https://discuss.circleci.com/t/commit-range-environment-variable/10410
            git --no-pager diff --check $(git merge-base origin/master $CIRCLE_SHA1)..$CIRCLE_SHA1
            flake8 tests/
            cd ui/
            flake8
            check-manifest
      - &pip-cache-save
        save_cache:
          key: temboard-{{ .Branch }}
          paths: ["~/.cache/pip/"]

  lint-js:
    docker: [image: node:16]
    working_directory: *working_directory
    steps:
      - checkout
      - &pip-cache-restore
        restore_cache:
          keys:
            - temboard-{{ .Branch }}
            - temboard-master
      - run:
          name: Setup and Lint
          command: |
            cd ui/
            npm ci
            npx prettier --check .

  unit:
    parameters:
      pyversion:
        description: "Python version"
        type: enum
        enum: ["3.6", "3.7", "3.8", "3.9"]
    docker:
      - image: dalibo/buildpack-python:<< parameters.pyversion >>
    working_directory: *working_directory
    steps:
    - checkout
    - &pip-cache-restore
      restore_cache:
        keys:
          - temboard-{{ .Branch }}
          - temboard-master
    - run:
        name: Install UI and tooling.
        command: |
          set -x
          pip<< parameters.pyversion >> install --upgrade --editable ui/ --requirement dev/requirements.txt --only-binary=psycopg2-binary psycopg2-binary
    - run:
        name: Install Agent.
        command: |
          pip<< parameters.pyversion >> install --upgrade --editable agent/ --only-binary=psycopg2-binary psycopg2-binary
    - run:
        name: Agent Unit Tests
        command: |
          pytest --full-trace --cov-report=xml agent/tests/unit/
    - run:
        name: UI Unit Tests
        command: |
          pytest --full-trace --cov-report=xml ui/tests/unit/
    - &pip-cache-save
      save_cache:
        key: temboard-{{ .Branch }}
        paths: ["~/.cache/pip/"]

  rpm:
    parameters:
      codename:
        description: "RHEL-clone distribution"
        type: enum
        enum: [rockylinux9, rockylinux8, centos7]
    docker: [{image: "dalibo/buildpack-pkg:<< parameters.codename >>"}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run:
        name: Build Agent RPM snapshot
        command: |
          agent/packaging/rpm/build.sh
          mv -v agent/dist/rhel*/temboard-agent/*.rpm agent/dist/
    - store_artifacts:
        path: /workspace/agent/dist/
    - run:
        name: Build UI RPM snapshot
        command: |
          ui/packaging/rpm/build.sh
          mv -v ui/dist/rhel*/temboard/*.rpm ui/dist/
    - store_artifacts:
        path: /workspace/ui/dist/
    - persist_to_workspace:
        root: .
        paths:
        - agent/dist/*.noarch.rpm
        - ui/dist/*.noarch.rpm

  deb:
    parameters:
      codename:
        description: "Debian version"
        type: enum
        enum: [bookworm, bullseye, buster, jammy]
    docker: [{image: "dalibo/buildpack-pkg:<< parameters.codename >>"}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run:
        name: Build UI Debian Snapshot
        command: ui/packaging/deb/mkdeb.sh
        environment:
          DEBFULLNAME: CircleCI
          DEBEMAIL: none@example.com
    - store_artifacts:
        path: /workspace/ui/dist/
    - run:
        name: Build Agent Debian Snapshot
        command: agent/packaging/deb/mkdeb.sh
        environment:
          DEBFULLNAME: CircleCI
          DEBEMAIL: none@example.com
    - store_artifacts:
        path: /workspace/agent/dist/
    - persist_to_workspace:
        root: .
        paths:
        - 'agent/dist/*_all.deb'
        - 'ui/dist/*_amd64.deb'

  func:
    parameters:
      dist:
        description: "Distribution"
        type: enum
        enum: [bookworm, bullseye, buster, centos7, rockylinux8, rockylinux9]
      pgversion:
        description: "PostgreSQL version for repository."
        type: enum
        enum: ["16", "15", "14", "13", "12", "11", "10", "9.6", "9.5"]
    resource_class: large
    docker:
    - image: dalibo/buildpack-postgres:<< parameters.dist >>
      environment:
        PGHOST: localhost
        PGPASSWORD: &PGPASSWORD confidentiel
        PGUSER: postgres
        SELENIUM: http://0.0.0.0:4444
    - image: postgres:<< parameters.pgversion >>-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: *PGPASSWORD
      command: [
      -c, log_statement=all,
      -c, log_connections=on,
      -c, "log_line_prefix=%m [%p]: [%l-1] app=%a,db=%d,client=%h,user=%u ",
      -c, cluster_name=repository,
      ]
    - image: selenium/standalone-firefox@sha256:b6d8279268b3183d0d33e667e82fec1824298902f77718764076de763673124f
      environment:
        SCREEN_WIDTH: 1280
        SCREEN_HEIGHT: 768
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - *pip-cache-restore
    - run:
        name: Shellcheck
        command: |
          shellcheck ui/share/purge.sh ui/share/create_repository.sh ui/share/auto_configure.sh
          shellcheck ui/packaging/deb/mkdeb.sh
    - run:
        name: Install temBoard UI & agent
        command: tests/install-all.sh
    - run:
        name: Install test dependencies
        command: pip3 install -r dev/requirements.txt
    - run:
        name: Run pytest
        command: |
          set -ux
          upstream=master  # Update when branching to v8.
          PGVERSION=<< parameters.pgversion >>
          PGVERSION=${PGVERSION%rc*}
          PGVERSION=${PGVERSION%beta*}
          tests/pytest-ci $upstream -vvv --pg-version=$PGVERSION tests/
    - store_artifacts:
        path: /workspace/tests/downloads/
    - store_artifacts:
        path: /workspace/tests/logs/
    - store_artifacts:
        path: /workspace/tests/screenshots/
    - *pip-cache-save

  release:
    # Configure secrets of this job in temboard CircleCI context.
    docker: [{image: dalibo/buildpack-python:bullseye}]
    working_directory: *working_directory
    steps:
    - checkout
    - attach_workspace:
        at: *working_directory
    - run:
        name: Create GitHub release
        command: |
          if [[ "${CIRCLE_TAG#v}" =~ [a-z] ]] ; then
            args=(--prerelease)
          else
            args=()
          fi

          find agent/dist ui/dist

          gh release create \
            $CIRCLE_TAG \
            agent/dist/*{.tar.gz,.whl,_all.deb,.noarch.rpm} \
            ui/dist/*{.tar.gz,.whl,_amd64.deb,.noarch.rpm} \
            --title "${CIRCLE_TAG#v}" \
            -F <(make -s release-notes VERSION=${CIRCLE_TAG#v}) \
            "${args[@]}"
    - run:
        name: Upload Agent to PyPI
        command: |
          set -eu
          export TWINE_PASSWORD="$AGENT_PYPI_TOKEN"
          twine upload agent/dist/*.{tar.gz,whl}
        environment:
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 'true'
    - run:
        name: Upload UI to PyPI
        command: |
          set -eu
          export TWINE_PASSWORD="$UI_PYPI_TOKEN"
          twine upload ui/dist/*.{tar.gz,whl}
        environment:
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 'true'

  docker:
    docker: [{image: dalibo/buildpack-python:bullseye}]
    working_directory: *working_directory
    steps:
    - checkout
    - setup_remote_docker
    - attach_workspace:
        at: *working_directory
    - run:
        name: Build Agent & UI Images
        command: |
          set -x
          make docker-build-agent docker-build-ui

          RELEASE_TAG="${CIRCLE_TAG#v}"
          if [ -n "$RELEASE_TAG" ] ; then
            # Create release tag from snapshot.
            docker tag dalibo/temboard-agent:snapshot dalibo/temboard-agent:$RELEASE_TAG
            docker tag dalibo/temboard:snapshot dalibo/temboard:$RELEASE_TAG

            # Stable release tags (without letters in version)
            if ! expr match "$RELEASE_TAG" ".*[a-z]\+" >/dev/null ; then
              # Point latest to this build
              docker tag dalibo/temboard-agent:snapshot dalibo/temboard-agent:latest
              docker tag dalibo/temboard:snapshot dalibo/temboard:latest
              # Point 8 to this build.
              docker tag dalibo/temboard-agent:snapshot dalibo/temboard-agent:8
              docker tag dalibo/temboard:snapshot dalibo/temboard:8
            fi
          fi

          # Log available tags. Next steps will push them all.
          docker images dalibo/temboard*
    - run:
        name: Push to Docker Hub (only master and tags)
        command: |
          set -x
          if [ -z "${CIRCLE_TAG-}" ] && [ master != "${CIRCLE_BRANCH-}" ] ; then
            exit 0;
          fi
          docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin \<<< "${DOCKER_HUB_TOKEN}"
          docker push --all-tags dalibo/temboard-agent
          docker push --all-tags dalibo/temboard
